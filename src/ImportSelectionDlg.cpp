// -*- C++ -*- generated by wxGlade 0.6.5 on Mon Jun 04 08:30:53 2012 from "C:\dpo\tools\scripts\cta\cta.wxg"

#include "ImportSelectionDlg.h"
#include "wx_ids.h"
#include "Utils.h"
#include "EnvVarVect.h"

#define SUPPORT_UTF8
#define SUPPORT_UCP
#include "pcrecpp.h"

#include <fstream>
#include <algorithm>

// begin wxGlade: ::extracode

// end wxGlade

wxColour new_env_var_color(0, 255, 0);

ImportSelectionDlg::ImportSelectionDlg(EnvVarVect * user,
                                        EnvVarVect * system,
                                        wxWindow* parent,
                                        int id,
                                        const wxString& title,
                                        const wxPoint& pos,
                                        const wxSize& size,
                                        long style):
    wxDialog(parent, id, title, pos, size, style)
    , env_vars_user_(user)
    , env_vars_system_(system)
{
    // begin wxGlade: ImportSelectionDlg::ImportSelectionDlg
    sizer_23_staticbox = new wxStaticBox(this, -1, wxT("Environment variables"));
    label_select_env_vars = new wxStaticText(this, wxID_ANY, wxT("Select environment variables to import."));
    label_select_env_vars_note = new wxStaticText(this, wxID_ANY, wxT("(Green variables are in the backup but not in the current set)"));
    label_user_env_vars_backup = new wxStaticText(this, wxID_ANY, wxT("User environment variables"));
    list_ctrl_env_vars_user_ = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    label_system_env_vars_backup = new wxStaticText(this, wxID_ANY, wxT("System environment variables"));
    list_ctrl_env_vars_system_ = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    button_select_all = new wxButton(this, wxID_HIGHEST + wxID_button_select_all, wxT("Select all"));
    button_unselect_all = new wxButton(this, wxID_HIGHEST + wxID_button_unselect_all, wxT("Unselect all"));
    button_import_variables = new wxButton(this, wxID_HIGHEST + wxID_button_import_variables, wxT("Import variables"));

    set_properties();
    do_layout();
    // end wxGlade

    create_list_controls();
}

BEGIN_EVENT_TABLE(ImportSelectionDlg, wxDialog)
    // begin wxGlade: ImportSelectionDlg::event_table
    EVT_BUTTON(wxID_HIGHEST + wxID_button_select_all, ImportSelectionDlg::on_select_all)
    EVT_BUTTON(wxID_HIGHEST + wxID_button_unselect_all, ImportSelectionDlg::on_unselect_all)
    EVT_BUTTON(wxID_HIGHEST + wxID_button_import_variables, ImportSelectionDlg::on_button_import_variables)
    // end wxGlade
END_EVENT_TABLE();


void ImportSelectionDlg::on_select_all(wxCommandEvent &event)
{
    set_item_state_to_selected(list_ctrl_env_vars_user_, 1);
    set_item_state_to_selected(list_ctrl_env_vars_system_, 1);
}

void ImportSelectionDlg::on_unselect_all(wxCommandEvent &event)
{
    set_item_state_to_selected(list_ctrl_env_vars_user_, 0);
    set_item_state_to_selected(list_ctrl_env_vars_system_, 0);
}

void ImportSelectionDlg::on_button_import_variables(wxCommandEvent &event)
{
    int count_user = list_ctrl_env_vars_user_->GetSelectedItemCount();
    int count_system = list_ctrl_env_vars_system_->GetSelectedItemCount();

    if (count_user + count_system == 0)
    {
        wxMessageBox("Nothing to import.\n\n"
                     "You must select variables to import.",
                    "Importing environment variables",
                    wxOK | wxICON_WARNING);

        return;
    }

    if (count_user)
    {
        import(list_ctrl_env_vars_user_, env_vars_user_);
    }

    if (count_system)
    {
        import(list_ctrl_env_vars_system_, env_vars_system_);
    }

    this->Destroy();
}

// wxGlade: add ImportSelectionDlg event handlers


void ImportSelectionDlg::set_properties()
{
    // begin wxGlade: ImportSelectionDlg::set_properties
    SetTitle(wxT("Environment variable selection"));
    SetSize(wxSize(780, 760));
    // end wxGlade
}


void ImportSelectionDlg::do_layout()
{
    // begin wxGlade: ImportSelectionDlg::do_layout
    wxBoxSizer* sizer_22 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_23 = new wxStaticBoxSizer(sizer_23_staticbox, wxHORIZONTAL);
    wxBoxSizer* sizer_24 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_25 = new wxBoxSizer(wxVERTICAL);
    sizer_22->Add(label_select_env_vars, 0, wxTOP|wxALIGN_CENTER_HORIZONTAL, 10);
    sizer_22->Add(label_select_env_vars_note, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    sizer_25->Add(label_user_env_vars_backup, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    sizer_25->Add(list_ctrl_env_vars_user_, 1, wxALL|wxEXPAND, 5);
    sizer_25->Add(label_system_env_vars_backup, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    sizer_25->Add(list_ctrl_env_vars_system_, 1, wxALL|wxEXPAND, 5);
    sizer_23->Add(sizer_25, 3, wxEXPAND, 0);
    sizer_24->Add(button_select_all, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    sizer_24->Add(button_unselect_all, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    sizer_24->Add(button_import_variables, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    sizer_23->Add(sizer_24, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_22->Add(sizer_23, 1, wxALL|wxEXPAND, 10);
    SetSizer(sizer_22);
    Layout();
    // end wxGlade
}


bool ImportSelectionDlg::read_file(const std::string & file)
{
    std::string complete_file_name = get_backup_dir() + "\\" + file;

    std::ifstream stream;
    stream.open(complete_file_name.c_str());
    if(stream)
    {
        std::vector<std::string> lines;
        while(stream)
        {
            std::string s;
            std::getline(stream, s);
            lines.push_back(s);
        }

        std::vector<EnvVar> env_vars_user;
        std::vector<EnvVar> env_vars_system;
        std::vector<std::string>::iterator it;
        for (it = lines.begin(); it != lines.end(); it++)
        {
            std::string key;
            std::string value;

            pcrecpp::RE("user:\\s(.*?)\\s=\\s(.*?)", pcrecpp::UTF8()).FullMatch(*it, &key, &value);
            if (key.size() != 0)
            {
                EnvVar env_var(widen(key), widen(value));
                env_vars_user.push_back(env_var);
            }

            key.clear();
            value.clear();
            pcrecpp::RE("system:\\s(.*?)\\s=\\s(.*?)", pcrecpp::UTF8()).FullMatch(*it, &key, &value);
            if (key.size() != 0)
            {
                EnvVar env_var(widen(key), widen(value));
                env_vars_system.push_back(env_var);
            }
        }

        std::sort(env_vars_user.begin(), env_vars_user.end());
        std::sort(env_vars_system.begin(), env_vars_system.end());

        std::vector<EnvVar>::iterator it_env_vars;

        int i(0);
        for (it_env_vars = env_vars_user.begin(); it_env_vars != env_vars_user.end(); it_env_vars++)
        {
            std::wstring key = it_env_vars->key_;
            std::wstring value = it_env_vars->value_;

            list_ctrl_env_vars_user_->InsertItem(i, key);
            list_ctrl_env_vars_user_->SetItem(i, 1, value);

            if (std::find(env_vars_user_->begin(), env_vars_user_->end(), key) == env_vars_user_->end())
            {
                list_ctrl_env_vars_user_->SetItemBackgroundColour(i, new_env_var_color);
            }

            ++i;
        }

        i = 0;
        for (it_env_vars = env_vars_system.begin(); it_env_vars != env_vars_system.end(); it_env_vars++)
        {
            std::wstring key = it_env_vars->key_;
            std::wstring value = it_env_vars->value_;

            list_ctrl_env_vars_system_->InsertItem(i, key);
            list_ctrl_env_vars_system_->SetItem(i, 1, value);

            if (std::find(env_vars_system_->begin(), env_vars_system_->end(), key) == env_vars_system_->end())
            {
                list_ctrl_env_vars_system_->SetItemBackgroundColour(i, new_env_var_color);
            }

            ++i;
        }
    }
    else
    {
        return false;
    }

    return true;
}


void ImportSelectionDlg::create_list_controls()
{
    list_ctrl_env_vars_user_->InsertColumn(0, "Variable");
    list_ctrl_env_vars_user_->SetColumnWidth(0, 200);
    list_ctrl_env_vars_user_->InsertColumn(1, "Value");
    list_ctrl_env_vars_user_->SetColumnWidth(1, 600);

    list_ctrl_env_vars_system_->InsertColumn(0, "Variable");
    list_ctrl_env_vars_system_->SetColumnWidth(0, 200);
    list_ctrl_env_vars_system_->InsertColumn(1, "Value");
    list_ctrl_env_vars_system_->SetColumnWidth(1, 600);
}


void ImportSelectionDlg::set_item_state_to_selected(wxListCtrl * lict_ctrl, int flag)
{
    int state = 0;

    if (flag)
    {
        state = wxLIST_STATE_SELECTED;
    }

    for (int i = 0; i != lict_ctrl->GetItemCount(); i++)
    {
        lict_ctrl->SetItemState(i, state, wxLIST_STATE_SELECTED);
    }

    for (int i = 0; i != lict_ctrl->GetItemCount(); i++)
    {
        lict_ctrl->SetItemState(i, state, wxLIST_STATE_SELECTED);
    }


}

void ImportSelectionDlg::import(wxListCtrl * list_ctrl, EnvVarVect * env_vars)
{
    for (int i = 0; i != list_ctrl->GetItemCount(); i++)
    {
        int state = list_ctrl->GetItemState(i, wxLIST_STATE_SELECTED);
        if (wxLIST_STATE_SELECTED == (state & wxLIST_STATE_SELECTED))
        {
            std::wstring key;
            std::wstring value;

            wxListItem item;
            item.SetId(i);

            item.SetColumn(0);
            item.m_mask = wxLIST_MASK_TEXT;
            if (list_ctrl->GetItem(item))
            {
                key = item.GetText().ToStdWstring();
            }

            item.SetColumn(1);
            if (list_ctrl->GetItem(item))
            {
                value = item.GetText().ToStdWstring();
            }

            if (std::find(env_vars->begin(), env_vars->end(), key) != env_vars->end())
            {
                env_vars->set_value(key, value);
            }
            else
            {
                EnvVar env_var(key, value);
                env_vars->push_back(env_var);
            }
        }
    }
}
