/*
 * ====================================================================
 * Copyright (c) 2012 Hubert Talbot.  All rights reserved.
 *
 * CTA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CTA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CTA.  If not, see <http://www.gnu.org/licenses/>.
 *
 * ====================================================================
 */

// -*- C++ -*- generated by wxGlade 0.6.5 on Mon Jun 04 08:30:53 2012 from "C:\dpo\tools\scripts\cta\cta.wxg"

#include "EnvVarVect.h"
#include "InfoDlg.h"
#include "wx_ids.h"
#include <map>

#include <wx/wx.h>
#include <wx/image.h>

#ifndef CTAFRAME_H
#define CTAFRAME_H

// begin wxGlade: ::dependencies
#include <wx/treectrl.h>
#include <wx/notebook.h>
// end wxGlade

// begin wxGlade: ::extracode

// end wxGlade


class CTAFrame: public wxFrame {
public:
    // begin wxGlade: CTAFrame::ids
    // end wxGlade

    CTAFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_FRAME_STYLE);

    enum enum_direction
    {
        UP,
        DOWN
    };

    enum enum_popup
    {
        POPUP_NEW_VALUE,
        POPUP_DELETE
    };

    enum enum_error_type
    {
        NOTHING_WRONG,
        BAD_ORDER,
        UNKNOWN_FILE_DIR,
        UPDATE_SYSTEM_WHEN_NOT_ADMIN
    };

private:
    // begin wxGlade: CTAFrame::methods
    void set_properties();
    void do_layout();
    // end wxGlade

protected:
    // begin wxGlade: CTAFrame::attributes
    wxStaticBox* sizer_8_staticbox;
    wxStaticBox* sizer_7_staticbox;
    wxTreeCtrl* tree_ctrl_user_;
    wxButton* button_user_new_var_;
    wxButton* button_user_new_value_;
    wxButton* button_user_delete_;
    wxPanel* notebook_1_pane_user_;
    wxTreeCtrl* tree_ctrl_system_;
    wxButton* button_system_new_;
    wxButton* button_system_new_value_;
    wxButton* button_system_delete_;
    wxStaticBitmap* bitmap_admin;
    wxPanel* notebook_1_pane_system_;
    wxNotebook* notebook_1_;
    wxListBox* list_box_msg;
    wxStaticBitmap* bitmap_gpl;
    wxButton* button_about_;
    wxCheckBox* checkbox_sorted_;
    wxButton* button_up_;
    wxButton* button_down_;
    wxButton* button_fix_;
    wxButton* button_reload_;
    wxButton* button_export_;
    wxButton* button_import_;
    wxButton* button_save_;
    wxButton* button_quit_;
    // end wxGlade

    EnvVarVect env_vars_user_;
    EnvVarVect env_vars_system_;
    EnvVarVect initial_user_env_vars_;
    EnvVarVect initial_system_env_vars_;
    EnvVarVectSpecial env_vars_special_;
    EnvVarVect * active_env_vars_;
    wxTreeCtrl * active_tree_;
    std::vector<std::wstring> details_;
    bool admin_;
    bool cta_is_changing_setting_;
    bool setting_changed_from_outside_;

    void load_env_vars();
    void reset_tree(const std::wstring & = L"");
    void reset_msg();
    void set_font_bad(wxTreeItemId &);
    bool check_paths();
    bool value_has_bad_path(const std::wstring & value, std::vector<std::wstring> &);
    bool check_cyclic_reference();
    bool value_has_reference_on_key(const std::wstring & value, std::wstring & key, std::wstring & referenced_key);
    bool check_order();
    void give_focus_to(const std::wstring & selection_text, wxTreeItemId * parent = 0);
    void get_current_selection_text(std::wstring & selection_text);
    void get_item_text_to_select_after_deletion(wxTreeItemId & item_to_del, std::wstring & text);
    void move(enum_direction direction);
    void dirty(bool & bDirtyUser, bool & bDirtySystem);
    void is_dirty(const EnvVarVect & initial_env_vars, const EnvVarVect & env_vars, bool & bDirty);
    bool save(bool bDirtyUser, bool bDirtySystem, std::wstring & msg);
    void get_admin_status();
    bool is_admin() { return admin_; }
    void get_env_vars_to_fix(EnvVarVect * env_vars, std::map<std::wstring, std::vector<std::wstring> > & to_fix);
    void fix(EnvVarVect & env_vars, std::map<std::wstring, std::vector<std::wstring> > &);
    void fix_all();
    void reset_according_to_sort_status();
    bool quit();
    bool export_env_vars(wxString & target_file);
    bool import_env_vars();
    bool reload_env_vars();

    DECLARE_EVENT_TABLE();

public:
    virtual void on_expanding(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_tree_key_down(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_end_edit(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_new_var(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_new_value(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_delete(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_begin_edit(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_page_change(wxNotebookEvent &event); // wxGlade: <event_handler>
    virtual void on_button_about(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_sort(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_up(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_down(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_fix(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_export(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_import(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_save(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_quit(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_reload(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void manual_mode();
    virtual void on_item_right_click(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_close(wxCloseEvent& event);
    virtual bool HandleSettingChange(WXWPARAM wParam, WXLPARAM lParam);
}; // wxGlade: end class



#endif // CTAFRAME_H
